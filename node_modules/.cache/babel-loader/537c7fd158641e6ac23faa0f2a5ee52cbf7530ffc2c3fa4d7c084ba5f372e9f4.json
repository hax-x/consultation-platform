{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nexport const supabase = createClient(supabaseUrl, supabaseKey);\nexport class DataService {\n  // Save stakeholder information\n  async saveStakeholder(stakeholderData) {\n    const {\n      data,\n      error\n    } = await supabase.from('stakeholders').insert([stakeholderData]).select();\n    if (error) throw error;\n    return data[0];\n  }\n\n  // Save consultation session\n  async saveConsultationSession(sessionData) {\n    const {\n      data,\n      error\n    } = await supabase.from('consultation_sessions').insert([sessionData]).select();\n    if (error) throw error;\n    return data[0];\n  }\n\n  // Save conversation message\n  async saveMessage(messageData) {\n    const {\n      data,\n      error\n    } = await supabase.from('conversation_messages').insert([messageData]).select();\n    if (error) throw error;\n    return data[0];\n  }\n\n  // Save priorities\n  async savePriorities(priorities) {\n    const {\n      data,\n      error\n    } = await supabase.from('priorities').insert(priorities).select();\n    if (error) throw error;\n    return data;\n  }\n\n  // Get consultation data for export\n  async getConsultationData(sessionId) {\n    const {\n      data: session\n    } = await supabase.from('consultation_sessions').select(`\n        *,\n        stakeholders(*),\n        conversation_messages(*),\n        priorities(*)\n      `).eq('id', sessionId).single();\n    return session;\n  }\n\n  // Get all consultations for admin\n  async getAllConsultations() {\n    const {\n      data,\n      error\n    } = await supabase.from('consultation_sessions').select(`\n        *,\n        stakeholders(name, role, department)\n      `).order('started_at', {\n      ascending: false\n    });\n    return data;\n  }\n}","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseKey","REACT_APP_SUPABASE_ANON_KEY","supabase","DataService","saveStakeholder","stakeholderData","data","error","from","insert","select","saveConsultationSession","sessionData","saveMessage","messageData","savePriorities","priorities","getConsultationData","sessionId","session","eq","single","getAllConsultations","order","ascending"],"sources":["/home/anas/Downloads/Internship/HWHS/Consultation-Platform/src/services/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nexport const supabase = createClient(supabaseUrl, supabaseKey);\n\nexport class DataService {\n  // Save stakeholder information\n  async saveStakeholder(stakeholderData) {\n    const { data, error } = await supabase\n      .from('stakeholders')\n      .insert([stakeholderData])\n      .select();\n\n    if (error) throw error;\n    return data[0];\n  }\n\n  // Save consultation session\n  async saveConsultationSession(sessionData) {\n    const { data, error } = await supabase\n      .from('consultation_sessions')\n      .insert([sessionData])\n      .select();\n\n    if (error) throw error;\n    return data[0];\n  }\n\n  // Save conversation message\n  async saveMessage(messageData) {\n    const { data, error } = await supabase\n      .from('conversation_messages')\n      .insert([messageData])\n      .select();\n\n    if (error) throw error;\n    return data[0];\n  }\n\n  // Save priorities\n  async savePriorities(priorities) {\n    const { data, error } = await supabase\n      .from('priorities')\n      .insert(priorities)\n      .select();\n\n    if (error) throw error;\n    return data;\n  }\n\n  // Get consultation data for export\n  async getConsultationData(sessionId) {\n    const { data: session } = await supabase\n      .from('consultation_sessions')\n      .select(`\n        *,\n        stakeholders(*),\n        conversation_messages(*),\n        priorities(*)\n      `)\n      .eq('id', sessionId)\n      .single();\n\n    return session;\n  }\n\n  // Get all consultations for admin\n  async getAllConsultations() {\n    const { data, error } = await supabase\n      .from('consultation_sessions')\n      .select(`\n        *,\n        stakeholders(name, role, department)\n      `)\n      .order('started_at', { ascending: false });\n\n    return data;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACtD,MAAMC,WAAW,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B;AAE3D,OAAO,MAAMC,QAAQ,GAAGP,YAAY,CAACC,WAAW,EAAEI,WAAW,CAAC;AAE9D,OAAO,MAAMG,WAAW,CAAC;EACvB;EACA,MAAMC,eAAeA,CAACC,eAAe,EAAE;IACrC,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,CAACJ,eAAe,CAAC,CAAC,CACzBK,MAAM,CAAC,CAAC;IAEX,IAAIH,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,CAAC,CAAC,CAAC;EAChB;;EAEA;EACA,MAAMK,uBAAuBA,CAACC,WAAW,EAAE;IACzC,MAAM;MAAEN,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,uBAAuB,CAAC,CAC7BC,MAAM,CAAC,CAACG,WAAW,CAAC,CAAC,CACrBF,MAAM,CAAC,CAAC;IAEX,IAAIH,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,CAAC,CAAC,CAAC;EAChB;;EAEA;EACA,MAAMO,WAAWA,CAACC,WAAW,EAAE;IAC7B,MAAM;MAAER,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,uBAAuB,CAAC,CAC7BC,MAAM,CAAC,CAACK,WAAW,CAAC,CAAC,CACrBJ,MAAM,CAAC,CAAC;IAEX,IAAIH,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,CAAC,CAAC,CAAC;EAChB;;EAEA;EACA,MAAMS,cAAcA,CAACC,UAAU,EAAE;IAC/B,MAAM;MAAEV,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAACO,UAAU,CAAC,CAClBN,MAAM,CAAC,CAAC;IAEX,IAAIH,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACb;;EAEA;EACA,MAAMW,mBAAmBA,CAACC,SAAS,EAAE;IACnC,MAAM;MAAEZ,IAAI,EAAEa;IAAQ,CAAC,GAAG,MAAMjB,QAAQ,CACrCM,IAAI,CAAC,uBAAuB,CAAC,CAC7BE,MAAM,CAAC;AACd;AACA;AACA;AACA;AACA,OAAO,CAAC,CACDU,EAAE,CAAC,IAAI,EAAEF,SAAS,CAAC,CACnBG,MAAM,CAAC,CAAC;IAEX,OAAOF,OAAO;EAChB;;EAEA;EACA,MAAMG,mBAAmBA,CAAA,EAAG;IAC1B,MAAM;MAAEhB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,uBAAuB,CAAC,CAC7BE,MAAM,CAAC;AACd;AACA;AACA,OAAO,CAAC,CACDa,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;IAE5C,OAAOlB,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}